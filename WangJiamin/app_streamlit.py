# -*- coding: utf-8 -*-
"""app_Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/161dXwYOOFF10voHSO-FwFHAyZVDN1kCh
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
import gensim
import joblib
import string
import nltk
from nltk.corpus import stopwords

# Download NLTK stopwords
nltk.download('stopwords')

# Load models
lda_model = gensim.models.LdaModel.load('lda_model/lda_model.model')
dictionary = gensim.corpora.Dictionary.load('dictionary/lyrics_dictionary.dict')
lr_model = joblib.load('ml_model/logistic_regression_model.pkl')

# Text preprocessing
def preprocess(text):
    tokens = text.lower().translate(str.maketrans('', '', string.punctuation)).split()
    tokens = [word for word in tokens if word not in stopwords.words('english')]
    return tokens

# Generate topic distribution vector
def get_topic_vector(tokens, dictionary):
    bow = dictionary.doc2bow(tokens)
    topic_dist = lda_model.get_document_topics(bow, minimum_probability=0)
    topic_vector = [prob for _, prob in topic_dist]
    return topic_vector

# Streamlit interface
st.title("Topic-Driven Sentiment Classification for Song Lyrics")
st.markdown("Enter song lyrics below or upload a CSV file with a 'lyrics' column.")

option = st.radio(
    "Choose your input method:",
    ("Manual Input", "Upload CSV")
)

if option == "Manual Input":
    lyrics = st.text_area("Enter your song lyrics here:")

    if st.button("Predict Sentiment"):
        if lyrics.strip() != "":
            tokens = preprocess(lyrics)
            topic_vector = get_topic_vector(tokens, dictionary)
            input_features = np.array(topic_vector).reshape(1, -1)
            prediction = lr_model.predict(input_features)[0]
            prob = lr_model.predict_proba(input_features)[0][prediction]

            st.success(f"**Predicted Sentiment:** {'Positive' if prediction==1 else 'Negative'} ({prob:.2f} probability)")
        else:
            st.warning("Please input lyrics before prediction.")

else:
    uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("Uploaded Data Preview:", df.head())

        if 'lyrics' not in df.columns:
            st.error("Your CSV must contain a 'lyrics' column!")
        else:
            results = []
            for lyric in df['lyrics']:
                tokens = preprocess(str(lyric))
                topic_vector = get_topic_vector(tokens, dictionary)
                input_features = np.array(topic_vector).reshape(1, -1)
                prediction = lr_model.predict(input_features)[0]
                results.append('Positive' if prediction == 1 else 'Negative')

            df['Predicted Sentiment'] = results
            st.write(df[['lyrics', 'Predicted Sentiment']])

st.sidebar.markdown("---")
st.sidebar.info("Built with Streamlit")